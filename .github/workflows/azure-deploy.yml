name: Azure App Service Deployment

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  AZURE_WEBAPP_NAME: deckchatbot-app
  AZURE_WEBAPP_PACKAGE_PATH: '.'
  NODE_VERSION: '18.x'
  PYTHON_VERSION: '3.11'

jobs:
  # Build and test job
  build-and-test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        service: [frontend, backend, ai-service]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      if: matrix.service == 'frontend'
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: |
          package-lock.json
          apps/frontend/package-lock.json
    
    - name: Setup Python
      if: matrix.service != 'frontend'
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install Poetry
      if: matrix.service != 'frontend'
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true
    
    # Frontend build and test
    - name: Install frontend dependencies
      if: matrix.service == 'frontend'
      run: |
        npm ci
        cd apps/frontend && npm ci
    
    - name: Lint frontend
      if: matrix.service == 'frontend'
      run: |
        cd apps/frontend
        npm run lint
    
    - name: Test frontend
      if: matrix.service == 'frontend'
      run: |
        cd apps/frontend
        npm run test
    
    - name: Build frontend
      if: matrix.service == 'frontend'
      run: |
        cd apps/frontend
        npm run build
    
    # Backend build and test
    - name: Install backend dependencies
      if: matrix.service == 'backend'
      run: |
        cd apps/backend
        poetry install --no-root
    
    - name: Test backend
      if: matrix.service == 'backend'
      run: |
        cd apps/backend
        poetry run pytest
    
    # AI Service build and test
    - name: Install AI service dependencies
      if: matrix.service == 'ai-service'
      run: |
        cd apps/ai-service
        poetry install --no-root
    
    - name: Test AI service
      if: matrix.service == 'ai-service'
      run: |
        cd apps/ai-service
        poetry run pytest
    
    # Upload build artifacts
    - name: Upload frontend build artifacts
      if: matrix.service == 'frontend'
      uses: actions/upload-artifact@v4
      with:
        name: frontend-build
        path: apps/frontend/dist/
        retention-days: 1
    
    - name: Upload backend artifacts
      if: matrix.service == 'backend'
      uses: actions/upload-artifact@v4
      with:
        name: backend-build
        path: apps/backend/
        retention-days: 1
    
    - name: Upload AI service artifacts
      if: matrix.service == 'ai-service'
      uses: actions/upload-artifact@v4
      with:
        name: ai-service-build
        path: apps/ai-service/
        retention-days: 1

  # Security scanning
  security-scan:
    runs-on: ubuntu-latest
    needs: build-and-test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif'

  # Docker build and push
  docker-build:
    runs-on: ubuntu-latest
    needs: [build-and-test, security-scan]
    if: github.ref == 'refs/heads/main'
    
    strategy:
      matrix:
        service: [frontend, backend, ai-service]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Azure Container Registry
      uses: azure/docker-login@v1
      with:
        login-server: ${{ secrets.AZURE_CONTAINER_REGISTRY }}
        username: ${{ secrets.AZURE_ACR_USERNAME }}
        password: ${{ secrets.AZURE_ACR_PASSWORD }}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./apps/${{ matrix.service }}/Dockerfile
        push: true
        tags: |
          ${{ secrets.AZURE_CONTAINER_REGISTRY }}/deckchatbot-${{ matrix.service }}:latest
          ${{ secrets.AZURE_CONTAINER_REGISTRY }}/deckchatbot-${{ matrix.service }}:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

  # Deploy to Azure App Service
  deploy:
    runs-on: ubuntu-latest
    needs: docker-build
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: frontend-build
        path: ./dist
    
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    
    - name: Deploy to Azure App Service
      uses: azure/webapps-deploy@v2
      with:
        app-name: ${{ env.AZURE_WEBAPP_NAME }}
        slot-name: 'production'
        package: ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}
        images: |
          ${{ secrets.AZURE_CONTAINER_REGISTRY }}/deckchatbot-frontend:${{ github.sha }}
          ${{ secrets.AZURE_CONTAINER_REGISTRY }}/deckchatbot-backend:${{ github.sha }}
          ${{ secrets.AZURE_CONTAINER_REGISTRY }}/deckchatbot-ai-service:${{ github.sha }}
    
    - name: Update Azure App Service configuration
      run: |
        az webapp config appsettings set \
          --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
          --name ${{ env.AZURE_WEBAPP_NAME }} \
          --settings \
            NODE_ENV=production \
            WEBSITES_ENABLE_APP_SERVICE_STORAGE=false \
            WEBSITES_PORT=80
    
    - name: Restart Azure App Service
      run: |
        az webapp restart \
          --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
          --name ${{ env.AZURE_WEBAPP_NAME }}
    
    - name: Health check
      run: |
        sleep 30
        curl -f https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net/health || exit 1

  # Post-deployment tests
  post-deploy-tests:
    runs-on: ubuntu-latest
    needs: deploy
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js for E2E tests
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
    
    - name: Install E2E test dependencies
      run: |
        npm ci
        npx playwright install
    
    - name: Run E2E tests
      run: |
        npm run test:e2e
      env:
        BASE_URL: https://${{ env.AZURE_WEBAPP_NAME }}.azurewebsites.net
    
    - name: Upload E2E test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: e2e-test-results
        path: test-results/
        retention-days: 7

  # Notification
  notify:
    runs-on: ubuntu-latest
    needs: [deploy, post-deploy-tests]
    if: always()
    
    steps:
    - name: Notify deployment status
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        fields: repo,message,commit,author,action,eventName,ref,workflow
      if: always()
