name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'

jobs:
  # Test Jobs
  test-frontend:
    name: Test Frontend
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./apps/frontend
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: apps/frontend/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Run type checking
        run: npm run type-check

      - name: Run tests
        run: npm test -- --coverage --watchAll=false

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./apps/frontend/coverage/lcov.info
          flags: frontend
          name: frontend-coverage

  test-backend:
    name: Test Backend
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./apps/backend
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: apps/backend/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm test -- --coverage --watchAll=false
        env:
          NODE_ENV: test
          PGHOST: localhost
          PGPORT: 5432
          PGUSER: postgres
          PGPASSWORD: postgres
          PGDATABASE: test_db
          REDIS_URL: redis://localhost:6379

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./apps/backend/coverage/lcov.info
          flags: backend
          name: backend-coverage

  test-ai-service:
    name: Test AI Service
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./apps/ai-service
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: latest
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: apps/ai-service/.venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root

      - name: Run tests
        run: |
          poetry run pytest --cov=ai_service --cov-report=xml --cov-report=term-missing

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./apps/ai-service/coverage.xml
          flags: ai-service
          name: ai-service-coverage

  # Security Scanning Jobs
  dependency-scan:
    name: Dependency Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

      - name: Upload Snyk results to GitHub Code Scanning
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: snyk.sarif

      - name: Run npm audit
        run: |
          cd apps/frontend && npm audit --audit-level=moderate
          cd ../backend && npm audit --audit-level=moderate

      - name: Python Security Scan
        run: |
          pip install safety
          safety check --json --output safety-report.json || true

      - name: Upload security scan results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: security-scan-results
          path: |
            snyk.sarif
            safety-report.json

  container-scan:
    name: Container Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build Docker images
        run: |
          docker build -f apps/frontend/Dockerfile -t deckchatbot-frontend .
          docker build -f apps/backend/Dockerfile -t deckchatbot-backend .
          docker build -f apps/ai-service/Dockerfile -t deckchatbot-ai-service .

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'deckchatbot-frontend'
          format: 'sarif'
          output: 'trivy-frontend.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-frontend.sarif'

  # Lint and Code Quality
  lint:
    name: Lint and Code Quality
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install root dependencies
        run: npm ci

      - name: Run ESLint
        run: npx eslint . --ext .js,.jsx,.ts,.tsx --format @microsoft/eslint-formatter-sarif --output-file eslint-results.sarif
        continue-on-error: true

      - name: Upload ESLint results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: eslint-results.sarif

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Python linting tools
        run: |
          pip install flake8 black isort mypy

      - name: Run Python linting
        run: |
          flake8 apps/ai-service --count --select=E9,F63,F7,F82 --show-source --statistics
          black --check apps/ai-service
          isort --check-only apps/ai-service

  # Build Jobs
  build:
    name: Build and Test Docker Images
    runs-on: ubuntu-latest
    needs: [test-frontend, test-backend, test-ai-service, lint]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build frontend image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./apps/frontend/Dockerfile
          push: false
          tags: deckchatbot-frontend:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build backend image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./apps/backend/Dockerfile
          push: false
          tags: deckchatbot-backend:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build AI service image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./apps/ai-service/Dockerfile
          push: false
          tags: deckchatbot-ai-service:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test Docker Compose
        run: |
          cd docker
          docker-compose config
          docker-compose up -d --build
          sleep 30
          docker-compose ps
          docker-compose logs
          docker-compose down

  # Deployment Jobs
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build, dependency-scan, container-scan]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment: staging
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to Staging
        run: |
          echo "Deploying to staging environment..."
          # Add staging deployment logic here
          # This could be:
          # - Deploy to staging server
          # - Update staging Docker containers
          # - Deploy to staging cloud environment

      - name: Run staging health checks
        run: |
          echo "Running health checks on staging..."
          # Add health check logic here

      - name: Notify deployment status
        if: always()
        run: |
          echo "Staging deployment completed with status: ${{ job.status }}"

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, dependency-scan, container-scan]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKER_USER }}
          password: ${{ secrets.DOCKER_PAT }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push production images
        run: |
          docker buildx build --platform linux/amd64,linux/arm64 \
            -f apps/frontend/Dockerfile \
            -t ${{ vars.DOCKER_USER }}/deckchatbot-frontend:latest \
            -t ${{ vars.DOCKER_USER }}/deckchatbot-frontend:${{ github.sha }} \
            --push .
          
          docker buildx build --platform linux/amd64,linux/arm64 \
            -f apps/backend/Dockerfile \
            -t ${{ vars.DOCKER_USER }}/deckchatbot-backend:latest \
            -t ${{ vars.DOCKER_USER }}/deckchatbot-backend:${{ github.sha }} \
            --push .
          
          docker buildx build --platform linux/amd64,linux/arm64 \
            -f apps/ai-service/Dockerfile \
            -t ${{ vars.DOCKER_USER }}/deckchatbot-ai-service:latest \
            -t ${{ vars.DOCKER_USER }}/deckchatbot-ai-service:${{ github.sha }} \
            --push .

      - name: Deploy to Production
        run: |
          echo "Deploying to production environment..."
          # Add production deployment logic here
          # This could be:
          # - Deploy to production server via SSH
          # - Update production Docker containers
          # - Deploy to production cloud environment
          # - Trigger deployment webhook

      - name: Run production health checks
        run: |
          echo "Running health checks on production..."
          # Add comprehensive health check logic here

      - name: Notify deployment status
        if: always()
        run: |
          echo "Production deployment completed with status: ${{ job.status }}"

  # Performance Testing
  performance-test:
    name: Performance Testing
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run performance tests
        run: |
          echo "Running performance tests..."
          # Add performance testing logic here
          # This could use tools like:
          # - Artillery.js for load testing
          # - Lighthouse for frontend performance
          # - k6 for API performance testing

      - name: Upload performance results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: performance-test-results
          path: performance-results/
